{"ast":null,"code":"var _jsxFileName = \"/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions/index\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, error));\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","className","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,WADyC,GAC3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAwB;AACpC,UAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,eACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADF,CADF;AAKD;AACF,KATwC;;AAAA,SAWzCE,WAXyC,GAW3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACL,KAAL,IAAcK,IAAI,CAACJ,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,aACE;AAAK,QAAA,SAAS,EAAEK,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKJ,WAAL,CAAiBM,IAAjB,CAHH,CADF;AAOD,KApBwC;;AAAA,SAsBzCE,QAtByC,GAsB9BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;AACD,KAxBwC;AAAA;;AA0BzCE,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKL,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAUE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CADF;AAcD;;AAzCwC;;AA4C3C,MAAMU,QAAQ,GAAGJ,UAAU,IAAI;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CAVD;;AAYA,MAAMG,WAAW,GAAGtB,SAAS,CAAC;AAC5BuB,EAAAA,IAAI,EAAE,cADsB;AAE5BL,EAAAA;AAF4B,CAAD,CAAT,CAGjBf,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCoB,WAAhC,CAAf","sourcesContent":["import React from \"react\"\nimport { Field, reduxForm } from \"redux-form\"\nimport { connect } from \"react-redux\"\nimport { createStream } from \"../../actions/index\"\n\nclass StreamCreate extends React.Component {\n  renderError = ({ error, touched }) => {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      )\n    }\n  }\n\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    this.props.createStream(formValues)\n  }\n\n  render() {\n    return (\n      <form\n        className=\"ui form error\"\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    )\n  }\n}\n\nconst validate = formValues => {\n  const errors = {}\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\"\n  }\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\"\n  }\n  return errors\n}\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate)\n\nexport default connect(null, { createStream })(formWrapped)\n"]},"metadata":{},"sourceType":"module"}