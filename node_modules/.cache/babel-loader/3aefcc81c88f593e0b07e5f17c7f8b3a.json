{"ast":null,"code":"// lodash library\nimport _ from \"lodash\"; // import of types from action.types file\n\nimport { FETCH_STREAM, FETCH_STREAMS, CREATE_STREAM, EDIT_STREAM, DELETE_STREAM } from \"../actions/types\"; // default state to an empty object\n\nexport default ((state = {}, action) => {\n  switch (action.type) {\n    // getting back an array of records that we want to merge into the state object\n    // return a new state object via spread operator(...)\n    // then call .mapKeys() from lodash, then take the list of stream which we got back from our API (action.payload) and create an object out of it using .mapKeys(). The keys of that object are the id's of the individual streams themselves\n    case FETCH_STREAMS:\n      return { ...state,\n        ..._.mapKeys(action.payload, \"id\")\n      };\n    // return a new state object via the spread operator(...)\n    // The string that we want to add into the object is on the action.payload property and add the id onto that property using key interpolation - [action.payload.id]\n    // assigned s value of action.payload\n\n    case FETCH_STREAM:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case CREATE_STREAM:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case EDIT_STREAM:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n    //Use the .omit() from the lodash library to return entire state object, with the key that we want to remove from the object. The payload that gets dispatched from the delete stream action creator is the id\n\n    case DELETE_STREAM:\n      return _.omit(state, action.payload);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/reducers/streamReducer.js"],"names":["_","FETCH_STREAM","FETCH_STREAMS","CREATE_STREAM","EDIT_STREAM","DELETE_STREAM","state","action","type","mapKeys","payload","id","omit"],"mappings":"AAAA;AACA,OAAOA,CAAP,MAAc,QAAd,C,CAEA;;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,kBANP,C,CAQA;;AACA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA;AACA;AACA,SAAKN,aAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAY,WAAGN,CAAC,CAACS,OAAF,CAAUF,MAAM,CAACG,OAAjB,EAA0B,IAA1B;AAAf,OAAP;AAEF;AACA;AACA;;AACA,SAAKT,YAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAY,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAqBJ,MAAM,CAACG;AAAxC,OAAP;;AACF,SAAKP,aAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAY,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAqBJ,MAAM,CAACG;AAAxC,OAAP;;AACF,SAAKN,WAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAY,SAACC,MAAM,CAACG,OAAP,CAAeC,EAAhB,GAAqBJ,MAAM,CAACG;AAAxC,OAAP;AAEF;;AACA,SAAKL,aAAL;AACE,aAAOL,CAAC,CAACY,IAAF,CAAON,KAAP,EAAcC,MAAM,CAACG,OAArB,CAAP;;AACF;AACE,aAAOJ,KAAP;AArBJ;AAuBD,CAxBD","sourcesContent":["// lodash library\nimport _ from \"lodash\"\n\n// import of types from action.types file\nimport {\n  FETCH_STREAM,\n  FETCH_STREAMS,\n  CREATE_STREAM,\n  EDIT_STREAM,\n  DELETE_STREAM\n} from \"../actions/types\"\n\n// default state to an empty object\nexport default (state = {}, action) => {\n  switch (action.type) {\n    // getting back an array of records that we want to merge into the state object\n    // return a new state object via spread operator(...)\n    // then call .mapKeys() from lodash, then take the list of stream which we got back from our API (action.payload) and create an object out of it using .mapKeys(). The keys of that object are the id's of the individual streams themselves\n    case FETCH_STREAMS:\n      return { ...state, ..._.mapKeys(action.payload, \"id\") }\n\n    // return a new state object via the spread operator(...)\n    // The string that we want to add into the object is on the action.payload property and add the id onto that property using key interpolation - [action.payload.id]\n    // assigned s value of action.payload\n    case FETCH_STREAM:\n      return { ...state, [action.payload.id]: action.payload }\n    case CREATE_STREAM:\n      return { ...state, [action.payload.id]: action.payload }\n    case EDIT_STREAM:\n      return { ...state, [action.payload.id]: action.payload }\n\n    //Use the .omit() from the lodash library to return entire state object, with the key that we want to remove from the object. The payload that gets dispatched from the delete stream action creator is the id\n    case DELETE_STREAM:\n      return _.omit(state, action.payload)\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}