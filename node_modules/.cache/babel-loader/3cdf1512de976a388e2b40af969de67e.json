{"ast":null,"code":"var _jsxFileName = \"/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/GoogleAuth.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signIn, signOut } from \"../actions/index\";\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      if (isSignedIn) {\n        this.props.signIn(this.auth.currentUser.get().getId());\n      } else {\n        this.props.signOut();\n      }\n    };\n\n    this.onSignInClick = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n\n    this.renderAuthButton = () => {\n      if (this.props.isSignedIn === null) {\n        return null;\n      } else if (this.props.isSignedIn === true) {\n        return React.createElement(\"button\", {\n          className: \"ui red google button \",\n          onClick: this.onSignOutClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"google icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }), \"Sign Out\");\n      } else {\n        return React.createElement(\"button\", {\n          className: \"ui red google button \",\n          onClick: this.onSignInClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"google icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }), \"Sign In with Google\");\n      }\n    };\n  }\n\n  // load up gapi library one time\n  componentDidMount() {\n    // google api library available inside of window scope inside of browser\n    window.gapi.load(\"client:auth2\", // callback function for when google library has finished loading\n    () => {\n      // asynchronously initialize authentication client with clientId and scope of email\n      window.gapi.client.init({\n        clientId: \"784716658380-04ei9l3s5cf7qku6moa3o104gi63dms2.apps.googleusercontent.com\",\n        scope: \"email\"\n      }) // promise returned\n      .then(() => {\n        // reference to auth object saved on component class\n        this.auth = window.gapi.auth2.getAuthInstance(); // isSignedIn is a property on the google auth object and can call get() to find out if you is signed in\n\n        this.onAuthChange(this.auth.isSignedIn.get());\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.renderAuthButton());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","onAuthChange","isSignedIn","props","auth","currentUser","get","getId","onSignInClick","onSignOutClick","renderAuthButton","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,kBAAhC;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SA2BvCC,YA3BuC,GA2BxBC,UAAU,IAAI;AAC3B,UAAIA,UAAJ,EAAgB;AACd,aAAKC,KAAL,CAAWN,MAAX,CAAkB,KAAKO,IAAL,CAAUC,WAAV,CAAsBC,GAAtB,GAA4BC,KAA5B,EAAlB;AACD,OAFD,MAEO;AACL,aAAKJ,KAAL,CAAWL,OAAX;AACD;AACF,KAjCsC;;AAAA,SAmCvCU,aAnCuC,GAmCvB,MAAM;AACpB,WAAKJ,IAAL,CAAUP,MAAV;AACD,KArCsC;;AAAA,SAuCvCY,cAvCuC,GAuCtB,MAAM;AACrB,WAAKL,IAAL,CAAUN,OAAV;AACD,KAzCsC;;AAAA,SA4CvCY,gBA5CuC,GA4CpB,MAAM;AACvB,UAAI,KAAKP,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AAClC,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,KAAKC,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AACzC,eACE;AAAQ,UAAA,SAAS,EAAC,uBAAlB;AAA0C,UAAA,OAAO,EAAE,KAAKO,cAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,aADF;AAMD,OAPM,MAOA;AACL,eACE;AAAQ,UAAA,SAAS,EAAC,uBAAlB;AAA0C,UAAA,OAAO,EAAE,KAAKD,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,wBADF;AAMD;AACF,KA9DsC;AAAA;;AACvC;AACAG,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CACE,cADF,EAEE;AACA,UAAM;AACJ;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACQ;AACJC,QAAAA,QAAQ,EACN,0EAFE;AAGJC,QAAAA,KAAK,EAAE;AAHH,OADR,EAME;AANF,OAOGC,IAPH,CAOQ,MAAM;AACV;AACA,aAAKf,IAAL,GAAYQ,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ,CAFU,CAGV;;AACA,aAAKpB,YAAL,CAAkB,KAAKG,IAAL,CAAUF,UAAV,CAAqBI,GAArB,EAAlB;AACA,aAAKF,IAAL,CAAUF,UAAV,CAAqBoB,MAArB,CAA4B,KAAKrB,YAAjC;AACD,OAbH;AAcD,KAnBH;AAqBD;;AAuCDsB,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKb,gBAAL,EAAN,CAAP;AACD;;AAlEsC;;AAqEzC,MAAMc,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLvB,IAAAA,UAAU,EAAEuB,KAAK,CAACrB,IAAN,CAAWF;AADlB,GAAP;AAGD,CAJD;;AAMA,eAAeN,OAAO,CAAC4B,eAAD,EAAkB;AAAE3B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAA8CC,UAA9C,CAAf","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { signIn, signOut } from \"../actions/index\"\n\nclass GoogleAuth extends React.Component {\n  // load up gapi library one time\n  componentDidMount() {\n    // google api library available inside of window scope inside of browser\n    window.gapi.load(\n      \"client:auth2\",\n      // callback function for when google library has finished loading\n      () => {\n        // asynchronously initialize authentication client with clientId and scope of email\n        window.gapi.client\n          .init({\n            clientId:\n              \"784716658380-04ei9l3s5cf7qku6moa3o104gi63dms2.apps.googleusercontent.com\",\n            scope: \"email\"\n          })\n          // promise returned\n          .then(() => {\n            // reference to auth object saved on component class\n            this.auth = window.gapi.auth2.getAuthInstance()\n            // isSignedIn is a property on the google auth object and can call get() to find out if you is signed in\n            this.onAuthChange(this.auth.isSignedIn.get())\n            this.auth.isSignedIn.listen(this.onAuthChange)\n          })\n      }\n    )\n  }\n\n  onAuthChange = isSignedIn => {\n    if (isSignedIn) {\n      this.props.signIn(this.auth.currentUser.get().getId())\n    } else {\n      this.props.signOut()\n    }\n  }\n\n  onSignInClick = () => {\n    this.auth.signIn()\n  }\n\n  onSignOutClick = () => {\n    this.auth.signOut()\n  }\n\n  // helper method to render singed in button\n  renderAuthButton = () => {\n    if (this.props.isSignedIn === null) {\n      return null\n    } else if (this.props.isSignedIn === true) {\n      return (\n        <button className=\"ui red google button \" onClick={this.onSignOutClick}>\n          <i className=\"google icon\" />\n          Sign Out\n        </button>\n      )\n    } else {\n      return (\n        <button className=\"ui red google button \" onClick={this.onSignInClick}>\n          <i className=\"google icon\" />\n          Sign In with Google\n        </button>\n      )\n    }\n  }\n\n  render() {\n    return <div>{this.renderAuthButton()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  }\n}\n\nexport default connect(mapStateToProps, { signIn, signOut })(GoogleAuth)\n"]},"metadata":{},"sourceType":"module"}