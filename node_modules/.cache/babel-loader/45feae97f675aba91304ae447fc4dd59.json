{"ast":null,"code":"// from axios api sever\nimport streams from \"../apis/streams\";\nimport history from \"../history\"; //\n\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"./types\"; // action creators\n// send action  of sign in to update boolean status of isSignedIn to true, receives google userId as an argument and is added to action on the payload property\n\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n}; // updates boolean status of isSignedIn to false\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n}; // asynchronous create stream action creator.\n// Called with a list of values from the form as an argument, that gets called with dispatch and getState\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth; // response from api server with form values and user ID of stream that was just created by user\n\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); // Do some programmatic navigation to get user back to root route\n\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  }); // console.log(response.data)\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push(\"/\");\n};","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CAEA;;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,SARP,C,CAUA;AAEA;;AACA,OAAO,MAAMC,MAAM,GAAGC,MAAM,IAAI;AAC9B,SAAO;AAAEC,IAAAA,IAAI,EAAET,OAAR;AAAiBU,IAAAA,OAAO,EAAEF;AAA1B,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AAAEF,IAAAA,IAAI,EAAER;AAAR,GAAP;AACD,CAFM,C,CAIP;AACA;;AACA,OAAO,MAAMW,YAAY,GAAGC,UAAU,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B,CADsE,CAEtE;;AACA,QAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB;AAEAM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR,CALsE,CAMtE;;AACApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACD,CARM;AAUP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AAClD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAY,UAAZ,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR,CAHkD,CAIlD;AACD,CALM;AAOP,OAAO,MAAMI,WAAW,GAAGC,EAAE,IAAI,MAAMV,QAAN,IAAkB;AACjD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC9D,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,KAAR,CAAe,YAAWF,EAAG,EAA7B,EAAgCX,UAAhC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AAEApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACD,CANM;AAQP,OAAO,MAAMO,YAAY,GAAGH,EAAE,IAAI,MAAMV,QAAN,IAAkB;AAClD,QAAMhB,OAAO,CAAC8B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEc;AAAhC,GAAD,CAAR;AACAzB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACD,CALM","sourcesContent":["// from axios api sever\nimport streams from \"../apis/streams\"\nimport history from \"../history\"\n\n//\nimport {\n  SIGN_IN,\n  SIGN_OUT,\n  CREATE_STREAM,\n  FETCH_STREAMS,\n  FETCH_STREAM,\n  DELETE_STREAM,\n  EDIT_STREAM\n} from \"./types\"\n\n// action creators\n\n// send action  of sign in to update boolean status of isSignedIn to true, receives google userId as an argument and is added to action on the payload property\nexport const signIn = userId => {\n  return { type: SIGN_IN, payload: userId }\n}\n\n// updates boolean status of isSignedIn to false\nexport const signOut = () => {\n  return { type: SIGN_OUT }\n}\n\n// asynchronous create stream action creator.\n// Called with a list of values from the form as an argument, that gets called with dispatch and getState\nexport const createStream = formValues => async (dispatch, getState) => {\n  const { userId } = getState().auth\n  // response from api server with form values and user ID of stream that was just created by user\n  const response = await streams.post(\"/streams\", { ...formValues, userId })\n\n  dispatch({ type: CREATE_STREAM, payload: response.data })\n  // Do some programmatic navigation to get user back to root route\n  history.push(\"/\")\n}\n\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\")\n\n  dispatch({ type: FETCH_STREAMS, payload: response.data })\n  // console.log(response.data)\n}\n\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`)\n\n  dispatch({ type: FETCH_STREAM, payload: response.data })\n}\n\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues)\n\n  dispatch({ type: EDIT_STREAM, payload: response.data })\n\n  history.push(\"/\")\n}\n\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`)\n\n  dispatch({ type: DELETE_STREAM, payload: id })\n  history.push(\"/\")\n}\n"]},"metadata":{},"sourceType":"module"}