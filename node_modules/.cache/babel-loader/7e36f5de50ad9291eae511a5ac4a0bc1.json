{"ast":null,"code":"var _jsxFileName = \"/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamForm.js\";\nimport React from \"react\"; // redux form imports. Field is a react component, reduxForm is a function that has same functionality as connect that allows us to call an action creator and get form data into our component.\n\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      console.log(\"submit\");\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"ui form error\" // handleSubmit is a callback function provided by redux form, pass in onSubmit callback function from streamCreate as argument\n      ,\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n} // gets called with formValues object which contains all the values form the form\n\n\nconst validate = formValues => {\n  const errors = {}; // if a user doesn't enter in a title\n\n  if (!formValues.title) {\n    // return object with key/value pair with the name of the field and error message\n    errors.title = \"You must enter a title\";\n  } // if a user doesn't enter in a description\n\n\n  if (!formValues.description) {\n    // return object with key/value pair with the name of the field and error message\n    errors.description = \"You must enter a description\";\n  } // otherwise return empty object\n\n\n  return errors;\n}; // reduxForm receives an object\n\n\nexport default reduxForm({\n  // name for form (\"streamCreate\") has it's values stored inside the form reducer\n  form: \"streamForm\",\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderError","error","touched","renderInput","input","label","meta","className","onSubmit","formValues","console","log","props","render","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SACvCC,WADuC,GACzB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAwB;AACpC,UAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,eACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADF,CADF;AAKD;AACF,KATsC;;AAAA,SAavCE,WAbuC,GAazB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACL,KAAL,IAAcK,IAAI,CAACJ,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,aACE;AAAK,QAAA,SAAS,EAAEK,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAGE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,EAIG,KAAKJ,WAAL,CAAiBM,IAAjB,CAJH,CADF;AAQD,KAvBsC;;AAAA,SAyBvCE,QAzBuC,GAyB5BC,UAAU,IAAI;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,WAAKC,KAAL,CAAWJ,QAAX,CAAoBC,UAApB;AACD,KA5BsC;AAAA;;AA8BvCI,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,eADZ,CAEE;AAFF;AAGE,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKN,QAA7B,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKL,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAaE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,CADF;AAiBD;;AAhDsC,C,CAmDzC;;;AACA,MAAMY,QAAQ,GAAGN,UAAU,IAAI;AAC7B,QAAMO,MAAM,GAAG,EAAf,CAD6B,CAE7B;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACrB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD,GAN4B,CAO7B;;;AAEA,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AAC3B;AACAF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD,GAZ4B,CAa7B;;;AACA,SAAOF,MAAP;AACD,CAfD,C,CAiBA;;;AACA,eAAenB,SAAS,CAAC;AACvB;AACAsB,EAAAA,IAAI,EAAE,YAFiB;AAGvBJ,EAAAA;AAHuB,CAAD,CAAT,CAIZjB,UAJY,CAAf","sourcesContent":["import React from \"react\"\n// redux form imports. Field is a react component, reduxForm is a function that has same functionality as connect that allows us to call an action creator and get form data into our component.\nimport { Field, reduxForm } from \"redux-form\"\n\nclass StreamForm extends React.Component {\n  renderError = ({ error, touched }) => {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      )\n    }\n  }\n\n  // render input helper method\n  // input and meta de-structured out of formProps object from redux form\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        {/* input properties from formProps added onto input element  */}\n        <input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    console.log(\"submit\")\n    this.props.onSubmit(formValues)\n  }\n\n  render() {\n    return (\n      <form\n        className=\"ui form error\"\n        // handleSubmit is a callback function provided by redux form, pass in onSubmit callback function from streamCreate as argument\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n      >\n        {/* field component imported from redux-form */}\n        {/* needs a name and component prop. component can be a react component or a function for the Field to call */}\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    )\n  }\n}\n\n// gets called with formValues object which contains all the values form the form\nconst validate = formValues => {\n  const errors = {}\n  // if a user doesn't enter in a title\n  if (!formValues.title) {\n    // return object with key/value pair with the name of the field and error message\n    errors.title = \"You must enter a title\"\n  }\n  // if a user doesn't enter in a description\n\n  if (!formValues.description) {\n    // return object with key/value pair with the name of the field and error message\n    errors.description = \"You must enter a description\"\n  }\n  // otherwise return empty object\n  return errors\n}\n\n// reduxForm receives an object\nexport default reduxForm({\n  // name for form (\"streamCreate\") has it's values stored inside the form reducer\n  form: \"streamForm\",\n  validate\n})(StreamForm)\n"]},"metadata":{},"sourceType":"module"}