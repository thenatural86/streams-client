{"ast":null,"code":"var _jsxFileName = \"/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamShow.js\";\nimport React from \"react\"; // library used to access live stream\n// flv downloads video stream and converts to file that can be played in html video player\n\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions/index\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props); // create a react reference to an actual DOM (video) element that gets created inside the DOM tree\n\n    this.videoRef = React.createRef();\n  } // call fetchStream with id of stream we want to fetch. destructure id from match object\n\n\n  componentDidMount() {\n    // destructuring out id property\n    const {\n      id\n    } = this.props.match.params; // console.log(this.videoRef)\n    // fetch the stream data\n\n    this.props.fetchStream(id); // call to build the player on first load\n\n    this.buildPlayer();\n  } // component fetches stream successfully and re-renders componentDidUpdate gets called\n\n\n  componentDidUpdate() {\n    // builds the player after we successfully fetch the stream\n    this.buildPlayer();\n  } // un-mount player from component\n\n\n  componentWillUnmount() {\n    // detach the player from video element in render method\n    this.player.destroy(); // console.log(\"unmount\")\n  } // helper method that builds the video player\n\n\n  buildPlayer() {\n    // if the player exist or if the stream doesn't yet exist return\n    if (this.player || !this.props.stream) {\n      return;\n    } // otherwise\n\n\n    const {\n      id\n    } = this.props.match.params; // create and assign flv player and pass in a options object\n\n    this.player = flv.createPlayer({\n      // specify type of video we are trying to receive\n      type: \"flv\",\n      // url of streaming video with the id of the stream we are trying to play\n      url: `http://localhost:8000/live/${id}.flv`\n    }); // call attach media element to flv player and pass in a reference to the actual video element that is being rendered inside component\n\n    this.player.attachMediaElement(this.videoRef.current); // load player\n\n    this.player.load();\n  }\n\n  render() {\n    // if the data has not been returned yet\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Loading...\");\n    } // destructure title and description\n\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: \"100%\"\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      style: {\n        position: \"absolute\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      style: {\n        position: \"absolute\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, description));\n  }\n\n} // map state and ownProps to props\n\n\nconst mapStateToProps = (state, ownProps) => {\n  // return object with a stream property and  value of the id from ownProps on the streams piece of state\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n}; // connect msp and fetchStream action creator\n\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow); // class component look at url, get id, fetch that stream, get stream out of store, then show in render","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","componentDidUpdate","componentWillUnmount","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","position","mapStateToProps","state","ownProps","streams"],"mappings":"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","sourcesContent":["import React from \"react\"\n// library used to access live stream\n// flv downloads video stream and converts to file that can be played in html video player\nimport flv from \"flv.js\"\nimport { connect } from \"react-redux\"\nimport { fetchStream } from \"../../actions/index\"\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // create a react reference to an actual DOM (video) element that gets created inside the DOM tree\n    this.videoRef = React.createRef()\n  }\n\n  // call fetchStream with id of stream we want to fetch. destructure id from match object\n  componentDidMount() {\n    // destructuring out id property\n    const { id } = this.props.match.params\n    // console.log(this.videoRef)\n    // fetch the stream data\n    this.props.fetchStream(id)\n    // call to build the player on first load\n    this.buildPlayer()\n  }\n\n  // component fetches stream successfully and re-renders componentDidUpdate gets called\n  componentDidUpdate() {\n    // builds the player after we successfully fetch the stream\n    this.buildPlayer()\n  }\n\n  // un-mount player from component\n  componentWillUnmount() {\n    // detach the player from video element in render method\n    this.player.destroy()\n    // console.log(\"unmount\")\n  }\n\n  // helper method that builds the video player\n  buildPlayer() {\n    // if the player exist or if the stream doesn't yet exist return\n    if (this.player || !this.props.stream) {\n      return\n    }\n    // otherwise\n    const { id } = this.props.match.params\n\n    // create and assign flv player and pass in a options object\n    this.player = flv.createPlayer({\n      // specify type of video we are trying to receive\n      type: \"flv\",\n      // url of streaming video with the id of the stream we are trying to play\n      url: `http://localhost:8000/live/${id}.flv`\n    })\n    // call attach media element to flv player and pass in a reference to the actual video element that is being rendered inside component\n    this.player.attachMediaElement(this.videoRef.current)\n    // load player\n    this.player.load()\n  }\n\n  render() {\n    // if the data has not been returned yet\n    if (!this.props.stream) {\n      return <div>Loading...</div>\n    }\n    // destructure title and description\n    const { title, description } = this.props.stream\n    return (\n      <div>\n        {/* video element with reference to actual video element and gets passed off to the video jsx tag*/}\n        {/* give video a width and controls (controls=true) props  */}\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls />\n        <h3 style={{ position: \"absolute\" }}>{title}</h3>\n        <h5 style={{ position: \"absolute\" }}>{description}</h5>\n      </div>\n    )\n  }\n}\n// map state and ownProps to props\nconst mapStateToProps = (state, ownProps) => {\n  // return object with a stream property and  value of the id from ownProps on the streams piece of state\n  return { stream: state.streams[ownProps.match.params.id] }\n}\n\n// connect msp and fetchStream action creator\nexport default connect(mapStateToProps, { fetchStream })(StreamShow)\n\n// class component look at url, get id, fetch that stream, get stream out of store, then show in render\n"]},"metadata":{},"sourceType":"module"}