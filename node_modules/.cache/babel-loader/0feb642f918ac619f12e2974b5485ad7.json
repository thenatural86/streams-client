{"ast":null,"code":"var _jsxFileName = \"/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamShow.js\";\nimport React from \"react\";\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions/index\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  } // call fetchStream with id of stream we want to fetch. destructure id from match object\n\n\n  componentDidMount() {\n    // destructuring out id property\n    const {\n      id\n    } = this.props.match.params; // console.log(this.videoRef)\n\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  } // component fetches stream successfully and re-renders componentDidUpdate gets called\n\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount() {\n    this.player.destroy();\n    console.log(\"unmount\");\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: \"100%\"\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n}; // connect msp and fetchStream action creator\n\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow); // class component look at url, get id, fetch that stream, get stream out of store, then show in render","map":{"version":3,"sources":["/Users/philipsmalls/Development/modern-react-with-redux/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","componentDidUpdate","componentWillUnmount","player","destroy","console","log","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD,GALsC,CAOvC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC,CAFkB,CAGlB;;AAEA,SAAKN,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACA,SAAKG,WAAL;AACD,GAfsC,CAiBvC;;;AACAC,EAAAA,kBAAkB,GAAG;AACnB,SAAKD,WAAL;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrB,SAAKC,MAAL,CAAYC,OAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAEDN,EAAAA,WAAW,GAAG;AACZ,QAAI,KAAKG,MAAL,IAAe,CAAC,KAAKV,KAAL,CAAWc,MAA/B,EAAuC;AACrC;AACD;;AAED,UAAM;AAAEV,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AAEA,SAAKI,MAAL,GAAchB,GAAG,CAACqB,YAAJ,CAAiB;AAC7BC,MAAAA,IAAI,EAAE,KADuB;AAE7BC,MAAAA,GAAG,EAAG,8BAA6Bb,EAAG;AAFT,KAAjB,CAAd;AAIA,SAAKM,MAAL,CAAYQ,kBAAZ,CAA+B,KAAKjB,QAAL,CAAckB,OAA7C;AACA,SAAKT,MAAL,CAAYU,IAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKrB,KAAL,CAAWc,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKvB,KAAL,CAAWc,MAA1C;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,GAAG,EAAE,KAAKb,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEuB,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHF,CADF;AAOD;;AAtDsC;;AAyDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACtB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACD,CAFD,C,CAIA;;;AACA,eAAeT,OAAO,CAAC8B,eAAD,EAAkB;AAAE7B,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf,C,CAEA","sourcesContent":["import React from \"react\"\nimport flv from \"flv.js\"\nimport { connect } from \"react-redux\"\nimport { fetchStream } from \"../../actions/index\"\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.videoRef = React.createRef()\n  }\n\n  // call fetchStream with id of stream we want to fetch. destructure id from match object\n  componentDidMount() {\n    // destructuring out id property\n    const { id } = this.props.match.params\n    // console.log(this.videoRef)\n\n    this.props.fetchStream(id)\n    this.buildPlayer()\n  }\n\n  // component fetches stream successfully and re-renders componentDidUpdate gets called\n  componentDidUpdate() {\n    this.buildPlayer()\n  }\n\n  componentWillUnmount() {\n    this.player.destroy()\n    console.log(\"unmount\")\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return\n    }\n\n    const { id } = this.props.match.params\n\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`\n    })\n    this.player.attachMediaElement(this.videoRef.current)\n    this.player.load()\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>\n    }\n    const { title, description } = this.props.stream\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id] }\n}\n\n// connect msp and fetchStream action creator\nexport default connect(mapStateToProps, { fetchStream })(StreamShow)\n\n// class component look at url, get id, fetch that stream, get stream out of store, then show in render\n"]},"metadata":{},"sourceType":"module"}